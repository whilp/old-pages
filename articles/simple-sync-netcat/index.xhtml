<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta charset="utf-8" />
<title>Simple synchronization with netcat</title>
<link rel="home" href="../../"/> 
<link rel="copyright" href="../../copyright"/> 
<link rel="openid.delegate" href="http://openid.m.aier.us/will" />
<link rel="openid.server" href="http://www.myopenid.com/server" /> 
<link rel="stylesheet" type="text/css" href="../../css/site.css" />
<link rel="updates alternate" type="application/atom+xml" href="https://github.com/wcmaier/wcmaier.github.com/commits/master.atom"/> 
<!--[if IE]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
</head>
<body>

<article>

<header>
<hgroup>
<h1>Simple synchronization with <code>netcat</code></h1>
</hgroup>
<nav>
<ul>
<li><strong><a href="../../">wcmaier</a></strong></li>
</ul>
</nav>

</header>

<section>
<p>
Each of the last few nights, I've found myself waiting for long-running tasks to complete before I head to bed.
Typically, I'll have kicked off several thousand operations with the intention of running something when they finish.
Unfortunately, I often do this without remembering that I also intend to get to bed at a reasonable time.
After several nights of staring blearily at consoles, I came up with a simple hack to help me get to sleep more quickly.
And best of all, this hack doesn't require any forethought at all (which is in short supply minutes before bedtime).
</p>

<p>
In the simplest case, I'm waiting on a task of long or unknown duration in order to start a second task on the same machine that depends on the first.
This is relatively easy to handle: find the PID of the first task and loop on <code>kill(1)</code> until the PID goes away, then start the second task:
</p>

<pre><code><![CDATA[
$ while kill -0 ${TASK1PID}; do
>     sleep 1
> done
$ date
$ ${TASK2CMD}
]]>
</code></pre>

<p>
Of course, it's possible for the first task to exit and for its PID to be reassigned while the monitor loop is sleeping.
If the shell provides a <code>wait</code> command and the first task can be safely backgrounded, the monitor loop can be avoided completely.
In any case, this neatly solves the problem on a single machine.
</p>

<p>
Most of my work pre-bedtime work, though, involves coordinating tasks that run on separate machines.
Simply waiting for a PID isn't good enough; now, I need to send signals across the network.
Fortunately, <code>netcat</code> makes this easy.
First, I set up a listener process on the machine running the first task:
</p>

<pre><code><![CDATA[
$ nc -dkl ${FREEHIGHPORT} </dev/null >/dev/null 2>&1 &
$ NCPID=$!
$ while kill -0 ${TASK1PID}; do
>     sleep 1
> done
$ kill ${NCPID}
]]>
</code></pre>

<p>
Then, I connect to the listener on the second machine:
</p>

<pre><code><![CDATA[
$ nc ${MACHINE1} ${FREEHIGHPORT}
$ ${TASK2CMD}
]]>
</code></pre>

<p>
(As before, replace the monitor loop with <code>wait</code> as appropriate.)
The <code>netcat</code> process on the second machine will block until the listener on the first machine is killed, effectively synchronizing the second task.
</p>

<p>
This scheme could be improved in a number of ways.
First, the exit status of the first task (or some other message) could be passed over the <code>netcat</code> channel, allowing conditional execution of the second task.
Second, the channel itself could be encrypted using <code>ssh</code>, <code>socat</code> or an encrypted <code>netcat</code>.
Third, the tasks themselves could be extended to support the synchronization logic.
I haven't done any of these things because I haven't needed to and didn't want to push my bedtime back any further than necessary.
</p>

</section>

<footer>
<dl>
<dt>Published</dt>
<dd><time pubdate="pubdate" datetime="2011-03-01T12:00-06:00">March 1, 2011</time></dd>
</dl>
<p><a href="../../copyright">Copyright</a> 2010â€“.</p>
</footer>

</article>
</body>
</html>
